---+ Domain-Specific System Test Automation with SYSTIR

We present a new system testing framework that features tight coupling between developers writing test fixtures and those with the domain knowledge of the system under test.  The combination of developer and tester allows us to write system integration tests with more joy.

---++ What We Have Now

Modern frameworks for automated system testing fall into three categories.  Some are capture/replay-based systems.  These require recording a user's actions and allow automated replay and verification of the results.  Some provide a vendor-specific language to write high-level scripts that describe test cases.  Finally, recent test automation frameworks [1][2] allow table- or keyword-based test descriptions that usually form a more data-driven approach utilizing a rigid, minimal syntax.  Even hybrids of these types exist,  such as recording scripts using a high-level language that allows hand customization or even data-driven parameterization.

The first category, capture/replay systems (also known as record/playback,) tout their ease-of-use and short test authoring times.  They allow large feature coverage only for a specific build of the application under test (AUT).  Subsequent changes to the AUT will require re-recording the scripts because of a close coupling to the presentation layer. Prominent software testing consultant and co-auther of _Lessons Learned in Software Testing_, Brett Pettichord remarked in 2001 that "record and playback tools provide an easy way to create throwaway testsuites." Recordings of an application can only be created once the application is actually built.

Test automation suites that instead provide their own scripting languages do little to address these problems.  We call these Vendor-Specific Languages (VSLs, also known as vendorscripts[4].)  They tout flexibility and easy-to-learn syntax.  They provide a micro-language for testers, usually including assertion keywords and simple looping constructs.  They offer greater data parameterization over capture/replay by replacing user input with stored data sets.  However, it's still up to testers to connect the testing languages abilities to their problem space.  The resulting glue code can become the hardest to maintain as developers provide a moving target AUT for testers to attach suites to.  VSLs are also fragile in the same way that capture/replay systems are.  They are written against an existing build and are closely coupled to the presentation layer.

Other test automation systems implement what Danny Faught calls "keyword" testing.  Systems such as FITnesse, CompuWare(what?) and Selenium are examples.  They provide a set of simple "keywords" to describe test actions.  Tests are often represented in a table structure, sometimes in actual spreadsheets.  While tests allow a very small set of operations, they usually offer much easier writeability.  Many offer strong data parameterization capabilities.  

---++ Tester And Toolsmith

Too many custom domain-specific languages require test writers to write code.  Testers are not always trained to utilize development techniques such as encapsulation or polymorphism, however.  Keyword testing only offers a solution at the cost of flexibility.  The result is that the test scripts written remain just that: scripts.  They cannot be reused outside of their original context.  Vendorscript language implementors try to counteract this frailty by adding features such as macro processing or bolted-on object oriented features.  The languages grow so that the most powerful tend to be too complex for testers to apply efficiently.  The ones that aren't too large are usually too limited.  Something is needed to help the testers strike a balance between test flexibility and test component reuse.

Enter the Toolsmith[3].  A Toolsmith is a developer who writes software for other developers.  In our case, the other developer is instead a tester.  The toolsmith's job is too provide the tester with the tools necessary to make testing an application easy and repeatable.  By pairing the two together, you end up with just enough testing and domain knowledge combined with just enough custom development.  The Toolsmith enables the tester to focus on writing tests in their own problem space, that of the application.  Meanwhile the tester lightens the load of the developer by handling the "rote" work of writing and running test cases.

This relationship proves ideal for both people involved.  Developers would rather write "interesting" code that solves specific problems.  Testers would rather write interesting test cases that challenge the AUT and excercise its functionality.

---++ What makes Ruby a good choice

The open source language named Ruby has become known for its applicability in domain-specific languages.  Ruby's dynamic typing and object-oriented self-modification allows its users to quickly create customized languages that read like natural language.  It's perl-inspired relaxed syntax allows for freedoms that aid in readability without sacrificing capability.  Optional semicolons and parentheses are an example of this.  Dave Thomas of the Pragmatic Programmers has highlighted Ruby's use as a generative language.

<blockquote>
   "With Ruby you write programs close to the problem domain. Rather than constantly mapping your ideas and designs down to the pedestrian level of most languages, with Ruby you'll find you can express them directly and express them elegantly. This means you code faster. It also means your programs stay readable and maintainable."
</blockquote>

---++ Save me, SYSTIR
SYSTIR implements a system test autmation framework that is both simple to extend and simple to use without requiring testers to learn a proprietary script language.  The actual SYSTIR project is very light on code.  It provides a simple test aggregation mechanism that will find and execute files with a particular extension.  These files are the tests in the suite.  Test files contain real ruby code that gets loaded and executed by SYSTIR.  As an example, let's suppose that we wanted to test a webpage that required the user to login.  Once logged in, the user will see their name in the title of the page to show that they logged in successfully.  The following is an possible SYSTIR script for a system test scenario in this problem domain:

<verbatim>
login_as "joe"
see_that_title_contains "Joe"
</verbatim> 

This test script would ideally be written by the tester early in the development of the project, probably before much code was written to support the test actions.  In this way, the system test scripts become a guide for developers as well as a validation tool of their work.  Some projects may even allow for the customer or end user themeselves to write the system test scripts.  They could simply be asked to write down in natural language what it is they want their application to do.  A tester will insert various assertive statements and hand it off to the Toolsmith to implement.

---++ SYSTIR supports tester/toolsmith
SYSTIR alone provides you with a bare minimum framework to get started writing automated system tests.  The next step is getting a Toolsmith together with the tester.  The Toolsmiths job is to write a SYSTIR *driver*.  This usually means a single Ruby script that acts as a front-end for all the operations of the ensuing tests.  The driver will typically use other Ruby classes that represent objects in the problem domain.  Here is a driver for the test scenario above:

<verbatim>
class SampleDriver
    def login_as(name)
        login_page = LoginPage.new
        login_page.fill_login_field name
        login_page.submit
    end

    def see_that_title_contains(string)
        title_page = TitlePage.new
        title_text = title_page.title
        assert title_text =~ /string/, "String #{string} not found in title."
    end
end
</verbatim>

This code implements the commands used in the above test script.  Notice that the commands are implemented with heavy reliance on other classes.  The =LoginPage= and =TitlePage= classes would also be written by the toolsmith and would provide the driver class with a domain representation to manipulate.  The idea here is to create an object layer to represent the system so that driver code is above the level of instrumentation and into direction.  The driver class shoulnd't contain code to find a link on a menu forinstance.  Instead, a helper class would be made to represent the menu first.  The driver would use an instance of =Menu= then to click on a link, probably using a parameter from a higher-level test script command such as =click_menu_item(name)=.

---++ SYSTIR supports reuse

Much of SYSTIR's power comes from its flexibility.  Its users are expected to build up a domain language in order to test their applications.  This test language will be reusable in the application as more test cases are extrapolated or as the application grows and undergoes change.  This allows the language to become only as flexbile as necessary.  If different application needs to be tested, there is little reason to try and fit the problem into the existing testing language.  

---++ SYSTIR on Display
(Example data, WATIR integration, AWTA)

---++ SYSTIR's future

SYSTIR is still early in its development at the time of this writing.  Planned features include a web-based reporting layer that allows its users to easily recognize and track test results.
(more)

---++ References

   * [1] Selenium
   * [2] FITnesse
   * [3] Jargon file
   * [4] Brett's vendorscript paper
   * more of course
