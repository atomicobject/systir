---
title: Spec Runner
inMenu: true
---

h2. Executing specs directly

Every RSpec context can be run directly from the command line:

<pre>
ruby path/to/my_spec.rb [options]
</pre>

This will print the results to STDOUT. Use the --help option for more details. This is
practical when you only want to run one context. If you want to run more, use the spec tool
or the Rake task. It should also be noted that the exitcode will always be 0 when run in standalone mode.

h2. The spec command line

After you install RSpec, you should have the spec command line tool on your PATH.
This tool can be used to process several RSpec contexts in one go. 

spec will exit with the exitcode 1 if one or more specs fail.

The general form of the command is

<pre>
spec [options] (FILE|DIRECTORY|GLOB)+
</pre>

Any number of files, directories and shell globs can be provided, all ruby source files
that are found are loaded. Running spec on the previous example results in:

<pre>
bin/spec examples
{execute: ruby ../bin/spec ../examples}
</pre>

Very simple and to the point. Passing specifications are indicated by a '.',
failing ones by a 'F'. Note that failure indicates a violated expectation as
well as an unexpected exception being raised.  Here's an example with a failing specification:

<pre>
bin/spec failing_examples/stack_spec.rb
{execute: ../bin/spec ../failing_examples/stack_spec.rb}
</pre>

In this case, the context is named "An almost full stack (with one item less than capacity)" 
and the specification is named "should return top when sent pop". These two are concatenated 
on the first line of the backtrace.

h2. Command line options

Additional command line options can be passed to customize the output and behaviour of RSpec.
The following options apply whether specs are run in standalone mode (by executing the .rb files directly), 
or using the spec command.

h3. -f, --format [specdoc|s|rdoc|r|]

Specify the output format. Default format is "progress bar" ("." for pass, "F" for fail). Most formats will produce some form of "testdox":http://agiledox.sourceforge.net/
output. The --dry-run options may also affect the output format.

For example, by setting the formatter to rdoc, we can output the kind of input that RDoc
needs to produce something like "this":../rdoc/files/EXAMPLES_rd.html 
<pre>
$ bin/spec failing_examples/team_spec.rb -f rdoc

{execute: ../bin/spec ../failing_examples/team_spec.rb -f rdoc}
</pre>

h4. Custom formatters

As of RSpec 0.5.7 custom formatters are supported. If the argument to the --format option is none
of the builtin formatters, RSpec will assume it's a class name, and try to instantiate that class.
If you're using this feature, make sure to use the --require option as well - *before* the
--format option.

See the RDoc for "Spec::Runner::BaseTextFormatter":../rdoc/classes/Spec/Runner/BaseTextFormatter.html 
for details on how to implement your own. A custom formatter can be found under examples/custom_formatter.rb.

h3. -r, --require FILE

Causes FILE to be loaded (via require) before any specs are executed. If you're using a custom
formatter, you have to specify this option *before* the --format option.

h3. -d, --dry-run

This option tells RSpec not to execute the specs, but they are still being parsed.
This can be useful when generating "testdox-like":http://agiledox.sourceforge.net/ documents

h3. -b, --backtrace

In order to make it easier to identify causes of failing specifications, RSpec will filter out
the parts of the backtrace that come from RSpec itself by default. If you wish to see them,
you can use -b or --backtrace:

<pre>
$ bin/spec failing_examples/team_spec.rb -b

{execute: ../bin/spec ../failing_examples/team_spec.rb -b}
</pre>

h3. -s, --spec &lt;name of context and/or specification&gt;

Enter the name of a context, spec, or both to run:

all the specs in a context ...

<pre>
$ bin/spec examples --spec "A stack with one item" -f s

{execute: ../bin/spec ../examples --spec "A stack with one item" -f s}
</pre>

... any spec in any context with a given name ...

<pre>
$ bin/spec examples --spec "should return top when sent top" -f s

{execute: ../bin/spec ../examples --spec "should return top when sent top" -f s}
</pre>

... or a specific spec in a specific context:

<pre>
$ bin/spec examples --spec "A stack with one item should return top when sent top" -f s

{execute: ../bin/spec ../examples --spec "A stack with one item should return top when sent top" -f s}
</pre>