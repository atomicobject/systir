---
title: Seven tools in one
inMenu: true
---

h2. Seven tools in one

RSpec combines several tools in one...

h3. 1) A language for expressing behavior

RSpec provides programmers with a domain specific language for defining expected behavior of Ruby code.

h3. 2) A runner for verifying behavior

RSpec provides a command line utility for executing behavior specifications.

h3. 3) Mock objects

Mock objects frameworks usually come as separate add-ons to existing XUnit frameworks. In RSpec it's an integrated
part of the framework.

h3. 4) Testdox-like reports

Expressing behavior in real sentences improves communication between programmer, 
analysts and testers. It also helps programmers keep a more critical mind about the code being developed.

RSpec's built in support for generating "testdox-like":http://agiledox.sourceforge.net/ reports makes the code's behavior more transparent 
to everybody (assuming you publish it to a webpage where everybody who needs to can see it).

h3. 5) Coverage tool

While coverage tools cannot prove that you have verified everything there is to verify about your code,
they can prove when you have not verified everything there is to verify about your code. RCov is such a
coverage tool, and RSpec supportws it out-of the box via its Rake task.

h3. 6) Coverage threshold verification

Except for the times when programmers agree to keep a close eye on coverage and keep it at, say 90%, it
will inevitably drop when they get other things to think about and start to write code in the wild.

RSpec ships with a special Rake task that can verify that the coverage remains on a level defined by the 
development team. Should the coverage drop, the build will fail, and developers are encouraged to address 
it right away.

h3. 7) Test::Unit translation

Did you invest a lot of time in writing Test::Unit tests and want to switch to RSpec? Try out the test2spec
tool, which will do most of the translation for you. (test2spec tool is experimental)